#  Выжимка команд для работы с GIT

$ git config --list --show-origin-Чтобы посмотреть все установленные настройки и узнать где именно они заданы;
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com - указать ваше имя и адрес
электронной почты.
$ git config --global init.defaultBranch main - чтобы установить имя main для вашей ветки по умолчанию, 
 git config --list - проверка настроек GIT по умолчанию.
 $ git help <команда>
$ git <команда> --help
$ man git-<команда> - как получить помощь по командам GIT.
git comand -h - выводит краткую помощь по конкретной comand.
 cd C:/Users/user/my_project переход в Windows в каталог в котором нужно создать репозиторий.
  git init -создать каталог или инициализировать.
  git clone https://github.com/libgit2/libgit2 клонируешь репозиторий из GITHUB на локальный компьютер
  git status -s - сокращенный вывод состояния GIT.
  git status --short -тоже самое что и git status -s.
  git diff - покажет разницу от последнего сохранения.
  git diff --staged -покажет разницу между двумя индексами.
  git diff --cached - покажет разницу между двумя проиндексированими изменениями.
  git difftool --tool-help- выводит список команд с графическим интерфейсом для просмотра изменений.
  git commit - открывает текстовый редактор для подписи коммита.
  git rm file - удаляет файл из индекса
  git rm --cached README - это удалить файл из индекса, оставив его при этом в рабочем каталоге.
  git mv file_from file_to - переименовать файл в Git.
  git log - возможность посмотреть что было сделано — историю коммитов.
  git log -p -2 - Одним из самых полезных аргументов является -p или --patch, который показывает
  разницу (выводит патч), внесенную в каждый коммит. Так же вы можете ограничитьколичество записей в выводе команды; используйте параметр -2 для вывода только двух записей.
  git log --stat - если вы хотите увидеть сокращенную статистику для каждого коммита, вы можете использовать опцию --stat
  git log --pretty=format:"%h - %an, %ar : %s"
  Полезные опции для git log --pretty=format
  %H Хеш коммита
  %h Сокращенный хеш коммита
  %T Хеш дерева
  %t Сокращенный хеш дерева
  %P Хеш родителей
  %p Сокращенный хеш родителей
  %an Имя автора
  %ae Электронная почта автора
  %ad Дата автора (формат даты можно задать опцией --date=option)
  %ar Относительная дата автора
  %cn Имя коммитера
  %ce Электронная почта коммитера
  %cd Дата коммитера
  %cr Относительная дата коммитера
  %s Содержание
  git log --pretty=format:"%h %s" --graph - можете увидеть небольшой граф в формате ASCII, который показывает текущую ветку и историю слияний.
  git log --since=2.weeks - следующая команда покажет список коммитов, сделанных за последние две недели
  git log -S function_name - найти последний коммит, который добавил или удалил вызов определенной функции
  git commit --amend - переделать коммит — внесите необходимые изменения, добавьте их в индекс и сделайте коммит ещё раз, указав параметр --amend.
  git reset HEAD <file> - для исключения  файла из индекса.
  git checkout -- <file> — опасная команда. Все локальные изменения в файле пропадут — Git просто заменит его версией из последнего коммита.
  git restore --staged <file> … для отмены индексации файла.
  git remote - чтобы просмотреть список настроенных удалённых репозиториев.
  git remote -v - чтобы просмотреть адреса для чтения и записи, привязанные к репозиторию.
  git remote add <shortname> <url> - чтобы добавить удалённый репозиторий и присвоить ему имя (shortname).
  git fetch [remote-name] -  команда связывается с указанным удалённым проектом и забирает все те данные проекта, которых у вас ещё нет. После того как вы выполнили команду, у вас должны появиться ссылки на все ветки из этого удалённого проекта, которые вы можете просмотреть или слить в любой момент.
  git fetch origin -  извлекает все наработки,отправленные на этот сервер после того, как вы его клонировали (или получили изменения с помощью fetch).
  git pull -   как правило, извлекает (fetch) данные с сервера, с которого вы изначально клонировали, и автоматически пытается слить (merge) их с кодом, над которым вы в данный момент работаете.
  git config --global pull.rebase "false" - Если хотите использовать поведение Git по умолчанию (простое смещение вперёд если возможно — иначе создание коммита слияния).
  git config --global pull.rebase "true"- использовать перебазирование при получении изменений.
  git push origin master -отправить вашу ветку master на сервер origi.  Эта команда срабатывает только в случае, если вы клонировали с сервера, на котором у вас сть права на запись, и если никто другой с тех пор не выполнял команду push
  git remote show origin - Она выдаёт URL удалённого репозитория, а также информацию об отслеживаемых ветках.
  git remote rm - удалить удаленный репозиторий.
  git tag- Просмотреть список имеющихся тегов.
  git tag -l "v1.8.5*" -  поиск тега по шаблону. Например, репозиторий Git содержит более 500 тегов. Если вы хотите посмотреть теги выпусков 1.8.5
  git tag -a v1.4 -m "my version 1.4" - Создание аннотированного тега в Git Опция -m задаёт сообщение, которое будет храниться вместе с тегом. Если не указать сообщение, то Git запустит редактор, чтобы вы смогли его ввести.
  git config core.editor notepad - 

